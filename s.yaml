edition: 1.0.0
name: serverless-aialbum

vars: # 全局变量
  region: cn-hangzhou
  service:
    name: serverless-aialbum
    description: '基于 Serverless 架构的人工智能相册'
    logConfig:
      enableRequestMetrics: true
      enableInstanceMetrics: false
      project: serverless-album
      logstore: functions
    vpcConfig:
      securityGroupId: sg-bp1hj3c5257bccakicl5
      vpcId: vpc-bp1j3jyq28flee6yub8es
      vSwitchIds:
        - vsw-bp1d3jv6r1mukbdpd06gy
    nasConfig:
      userId: 10003
      groupId: 10003
      mountPoints:
        - serverAddr: 0e56349b3f-jsk50.cn-hangzhou.nas.aliyuncs.com
          nasDir: /serverless-album
          fcDir: /mnt/auto
  environmentVariables:
    ACCESS_KEY_ID: ${env(ACCESS_KEY_ID)}
    ACCESS_KEY_SECRET: ${env(ACCESS_KEY_SECRET)}
    MINIPROGRAM_APPID: ${env(MINIPROGRAM_APPID)}
    MINIPROGRAM_SECRET: ${env(MINIPROGRAM_SECRET)}
    OSS_BUCKET: ${env(OSS_BUCKET)}
    OSS_ENDPOINT: ${env(OSS_ENDPOINT)}
    RDS_HOST: ${env(RDS_HOST)}
    RDS_NAME: ${env(RDS_NAME)}
    RDS_PASSWORD: ${env(RDS_PASSWORD)}
    RDS_PORT: ${env(RDS_PORT)}
    RDS_USER: ${env(RDS_USER)}
    REDIS_LOCATION: ${env(REDIS_LOCATION)}
    REDIS_PASSWORD: ${env(REDIS_PASSWORD)}
    UPDATE_TOKEN: ${env(UPDATE_TOKEN)}


services:
  server: # 业务名称/模块名称
    component: fc
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: server
        description: '核心业务逻辑'
        codeUri: './server'
        runtime: python3
        handler: app.application
        timeout: 60
        memorySize: 1600
        environmentVariables:
          PYTHONUSERBASE:  /opt
          ACCESS_KEY_ID: ${vars.environmentVariables.ACCESS_KEY_ID}
          ACCESS_KEY_SECRET: ${vars.environmentVariables.ACCESS_KEY_SECRET}
          MINIPROGRAM_APPID: ${vars.environmentVariables.MINIPROGRAM_APPID}
          MINIPROGRAM_SECRET: ${vars.environmentVariables.MINIPROGRAM_SECRET}
          OSS_BUCKET: ${vars.environmentVariables.OSS_BUCKET}
          OSS_ENDPOINT: ${vars.environmentVariables.OSS_ENDPOINT}
          RDS_HOST: ${vars.environmentVariables.RDS_HOST}
          RDS_NAME: ${vars.environmentVariables.RDS_NAME}
          RDS_PASSWORD: ${vars.environmentVariables.RDS_PASSWORD}
          RDS_PORT: ${vars.environmentVariables.RDS_PORT}
          RDS_USER: ${vars.environmentVariables.RDS_USER}
          REDIS_LOCATION: ${vars.environmentVariables.REDIS_LOCATION}
          REDIS_PASSWORD: ${vars.environmentVariables.REDIS_PASSWORD}
          UPDATE_TOKEN: ${vars.environmentVariables.UPDATE_TOKEN}
        layers:
          - 544c887879c38e5d0afcaf8b4f8f348e#aialbum-server#1
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - DELETE
              - PUT
      customDomains:
        - domainName: server.aialbum.net
          protocol: HTTP
          routeConfigs:
            - path: '/*'
  update-lifecycle: # 业务名称/模块名称
    component: fc
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: update-lifecycle
        description: '图片上传后的回调，更新照片状态'
        codeUri: './update-lifecycle'
        runtime: python3
        handler: index.handler
        timeout: 60
        memorySize: 128
        environmentVariables:
          ACCESS_KEY_ID: ${vars.environmentVariables.ACCESS_KEY_ID}
          ACCESS_KEY_SECRET: ${vars.environmentVariables.ACCESS_KEY_SECRET}
          OSS_BUCKET: ${vars.environmentVariables.OSS_BUCKET}
          OSS_ENDPOINT: ${vars.environmentVariables.OSS_ENDPOINT}
          UPDATE_TOKEN: ${vars.environmentVariables.UPDATE_TOKEN}
          DOMAIN: ${server.props.customDomains[0].domainName}
      triggers:
        - name: update-lifecycle
          sourceArn: acs:oss:cn-hangzhou:${config(AccountID)}:${env(OSS_BUCKET)}
          type: oss
          config:
            events:
              - oss:ObjectCreated:*
            filter:
              Key:
                Prefix: 'origin/'
                Suffix: ''
  asynchronous-main-flow: # 业务名称/模块名称
    component: fc
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: asynchronous-main-flow
        description: '核心业务逻辑'
        codeUri: './asynchronous-main-flow'
        runtime: python3
        handler: index.handler
        timeout: 60
        memorySize: 3072
        environmentVariables:
          PYTHONUSERBASE:  /mnt/auto/server/python
          ACCESS_KEY_ID: ${vars.environmentVariables.ACCESS_KEY_ID}
          ACCESS_KEY_SECRET: ${vars.environmentVariables.ACCESS_KEY_SECRET}
          OSS_BUCKET: ${vars.environmentVariables.OSS_BUCKET}
          OSS_ENDPOINT: ${vars.environmentVariables.OSS_ENDPOINT}
          UPDATE_TOKEN: ${vars.environmentVariables.UPDATE_TOKEN}
          DOMAIN: ${server.props.customDomains[0].domainName}
      triggers:
        - name: asynchronous-main-flow
          sourceArn: acs:oss:cn-hangzhou:${config(AccountID)}:${env(OSS_BUCKET)}
          type: oss
          config:
            events:
              - oss:ObjectCreated:*
            filter:
              Key:
                Prefix: 'tmp/'
                Suffix: ''